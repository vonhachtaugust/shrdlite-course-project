///<reference path="World.ts"/>
///<reference path="Interpreter.ts"/>
///<reference path="Graph.ts"/>

/** 
* Planner module
*
* The goal of the Planner module is to take the interpetation(s)
* produced by the Interpreter module and to plan a sequence of actions
* for the robot to put the world into a state compatible with the
* user's command, i.e. to achieve what the user wanted.
*
* The planner should use your A* search implementation to find a plan.
*/
module Planner {

    //////////////////////////////////////////////////////////////////////
    // exported functions, classes and interfaces/types

    /**
     * Top-level driver for the Planner. Calls `planInterpretation` for each given interpretation generated by the Interpreter. 
     * @param interpretations List of possible interpretations.
     * @param currentState The current state of the world.
     * @returns Augments Interpreter.InterpretationResult with a plan represented by a list of strings.
     */
    export function plan(interpretations: Interpreter.InterpretationResult[], currentState: WorldState): PlannerResult[] {
        var errors: Error[] = [];
        var plans: PlannerResult[] = [];
        interpretations.forEach((interpretation) => {
            try {
                var result: PlannerResult = <PlannerResult>interpretation;
                result.plan = planInterpretation(result.interpretation, currentState);
                if (result.plan.length == 0) {
                    result.plan.push("That is already true!");
                }
                plans.push(result);
            } catch (err) {
                errors.push(err);
            }
        });
        if (plans.length) {
            return plans;
        } else {
            // only throw the first error found
            throw errors[0];
        }
    }

    export interface PlannerResult extends Interpreter.InterpretationResult {
        plan: string[];
    }

    export function stringify(result: PlannerResult): string {
        return result.plan.join(", ");
    }

    //////////////////////////////////////////////////////////////////////
    // private functions

    /**
     * The core planner function. The code here is just a template;
     * you should rewrite this function entirely. In this template,
     * the code produces a dummy plan which is not connected to the
     * argument `interpretation`, but your version of the function
     * should be such that the resulting plan depends on
     * `interpretation`.
     *
     * 
     * @param interpretation The logical interpretation of the user's desired goal. The plan needs to be such that by executing it, the world is put into a state that satisfies this goal.
     * @param state The current world state.
     * @returns Basically, a plan is a
     * stack of strings, which are either system utterances that
     * explain what the robot is doing (e.g. "Moving left") or actual
     * actions for the robot to perform, encoded as "l", "r", "p", or
     * "d". The code shows how to build a plan. Each step of the plan can
     * be added using the `push` method.
     */
    function planInterpretation(interpretation: Interpreter.DNFFormula, state: WorldState): string[] {

        let stateGraph: StateGraph = new StateGraph();
        var isGoal = (n: any) => goal(interpretation, n);
        var heuristic = (n: any) => heuristicFunction(n, interpretation);
        
        let path = aStarSearch(
            stateGraph,
            state,
            isGoal,
            heuristic,
            10
        );
        
        let stateSequence = path.path;
        stateSequence.unshift(stateSequence);
        
        return pathToPlan(stateSequence);
    }
    
    function pathToPlan(path : WorldState[]) : string[] {
        
        // return value
        let result : string[] = [];
        
        for (let i = 1; i < path.length; i++) {
            let currentState = path[i-1];
            let nextState = path[i];
            
            if (currentState.arm < nextState.arm) {
                // moved arm to the right
                result.push("r");
            } else if (currentState.arm > nextState.arm) {
                // moved arm to the left
                result.push("l");
            } else {
                // dropped or picked up
                if (currentState.holding != null && nextState.holding == null) {
                    // dropped
                    result.push("d");
                } else if (currentState.holding == null && nextState.holding != null) {
                    // picked up
                    result.push("p");
                } else {
                    console.log("pathToPlan() got invalid path: " + path);
                }
            }
        }
        
        return result;
    }

    /**
     * function used by isGoal to check the current world state with the interpretation
     */
     function goal(interpretation: Interpreter.DNFFormula, state: WorldState): boolean {
        // for each found interpretation
        for (let i = 0; i < interpretation.length; i++) {
            // for each disjunctive goal
            let thisDisjRes = true;
            for (let j = 0; j < interpretation[i].length; j++) {
                // fufill a conjunctive goal
                let thisConjRes = Planner.conjunctive(interpretation[i][j], state);
                thisDisjRes = thisDisjRes && thisConjRes;
            }
            if (thisDisjRes) {
                return true;
            }
        }
        return false;
    }

    export function conjunctive(interpretation: any, state : WorldState): boolean {
        // function assumes  previous required conditions between number of arguments given a relation etc. are handled. See Interpreter.ts
        let relation = interpretation.relation;
        let args = interpretation.args;

        if (relation == "holding") {
            return (state.holding == args[0]);
        }
        else if ((relation == "inside") || (relation == "ontop")) {
            if (Interpreter.isInSameStack(args[0], args[1], state)) {
                return (Interpreter.stackIndexOf(args[0], state) - 1 == Interpreter.stackIndexOf(args[1], state));
            }
            return false;
        }
        else if (relation ==  "above") {
            if (Interpreter.isInSameStack(args[0], args[1], state)) {
                return (Interpreter.stackIndexOf(args[0], state) > Interpreter.stackIndexOf(args[1], state));       
            }
            return false;
        }
        else if (relation == "under") {
            if (Interpreter.isInSameStack(args[0], args[1], state)) {
                return (Interpreter.stackIndexOf(args[0], state) < Interpreter.stackIndexOf(args[1], state));
            }
            return false;
        }        else if (relation == "beside") {
            return (Interpreter.stackIndex(args[0], state) + 1 == Interpreter.stackIndex(args[1], state))
            || (Interpreter.stackIndex(args[0], state) - 1 == Interpreter.stackIndex(args[1], state));
        }
        else if (relation == "leftof") {
            return (Interpreter.stackIndex(args[0], state) - 1 == Interpreter.stackIndex(args[1], state));
        }
        else if (relation == "rightof") {
            return (Interpreter.stackIndex(args[0], state) + 1 == Interpreter.stackIndex(args[1], state));
        }
        // the relation doesn't exist.
        return false;
    }


    /**
     * function for calculating the heuristic for state 's'
     */
    function heuristicFunction(state: WorldState, interpretation : Interpreter.DNFFormula) : number {
        
        let isGoal = goal(interpretation, state);
        if (isGoal) {
            return 0;
        }
        
        let disjGoals : Interpreter.Literal[][] = interpretation;
        
        // result heuristic will be the minimum of the heuristics for the disjunctions
        let minHeuristic = Infinity;
        
        // assumes that interpretation is a list of disjunctive goals
        for (let i = 0; i < disjGoals.length; i++) {
            
            // list of conjunctions for this disjunctive goal
            let thisDisjunction : Interpreter.Literal[] = disjGoals[i];
            
            // heuristic for this disjunction will be the sum of the heuristics for the conjunctions
            let thisHeuristic = 0;
            
            for (let j = 0; j < thisDisjunction.length; j++) {
                let thisConjunction : Interpreter.Literal = thisDisjunction[j];
                thisHeuristic += estimatedPathLength(state,thisConjunction)
            }
            
            if (thisHeuristic < minHeuristic) {
                minHeuristic = thisHeuristic;
            }
        }
        
        return minHeuristic;
    }
    
    function estimatedPathLength(state : WorldState, condition : Interpreter.Literal) : number {
        
        // return value
        let result : number = 0;
        
        //let polarity = condition.polarity; // assumed to be true for now
        let rel = condition.relation;
        let args = condition.args;
        
        if (rel == "inside") {
            rel = "ontop";
        }
        
        if (rel == "holding") {
            if (args.length == 1) {
                
                let targetTag = args[0];
                
                if (targetTag == state.holding) {
                    // already holding desired object
                    return 0;
                }
                
                let targetStackIndex = Interpreter.stackIndex(targetTag, state);
                let targetStackIndexOf = Interpreter.stackIndexOf(targetTag, state);
                
                // move arm to right stack
                result += Math.abs(state.arm - targetStackIndex);
                
                // number of obstacles in the of picking up 'target'
                let numObstacles = state.stacks[targetStackIndex].length - (targetStackIndexOf + 1);
                
                // for each obstacle, pick up (+1), move away (+1), drop (+1) and move back (+1), (+4) in total
                result += 4 * numObstacles;
                
                // pick up 'target'
                result++;
    
            } else {
               console.error("estimatedPathLengt h() got conditi on 'holding' with a rgs: " + args)
            }
        } else if (rel == "ontop") {
            if (args.length == 2) {
                
                // target entity
                let targetTag = args[0];
                let targetStackIndex = Interpreter.stackIndex(targetTag, state);
                
                // relative entity
                let relativeTag = args[1];
                let relativeStackIndex = Interpreter.stackIndex(relativeTag, state);
                
                // clearing the way for relative corresponds to holding it, but skipping picking it up
                if (relativeTag != "floor") {
                    let holdingRelativeLiteral : Interpreter.Literal = {
                        polarity: true,
                        relation: "holding",
                        args: [relativeTag]
                    };
                    result += estimatedPathLength(state, holdingRelativeLiteral) - 1;
                }
                
                // heuristic for picking up 'targetTag'
                let holdingTargetLiteral : Interpreter.Literal = {
                    polarity: true,
                    relation: "holding",
                    args: [targetTag]
                };
                result += estimatedPathLength(state, holdingTargetLiteral);
                
                // move arm to target stack
                result += Math.abs(relativeStackIndex - targetStackIndex);
                
                // drop object
                result++;
                
            } else {
                console.error("estimatedPathLength() got condition 'holding' with args: " + args)
            }
        } else {
            console.error("estimatedPathLength() got state with relation: " + rel);
        }
        
        return result;
    }

    class StateGraph implements Graph<WorldState> {

        outgoingEdges(state: WorldState): Edge<WorldState>[] {

            // return value
            let outgoingEdges: Edge<WorldState>[] = [];

            // get states reachable from 'state'
            let outgoingNodes: WorldState[] = getReachableStates(state);

            // prepare the list of edges
            for (let i = 0; i < outgoingNodes.length; i++) {
                outgoingEdges.push({
                    from: state,
                    to: outgoingNodes[i],
                    cost: 1
                });
            }

            return outgoingEdges;
        }

        compareNodes(a: WorldState, b: WorldState): number {
            if (JSON.stringify(a) != JSON.stringify(b)) {
                return 1;
            } else {
                return 0;
            }
        }
    }

    /**
     * generate a list of states reachable in one move
     */
    function getReachableStates(state: WorldState): WorldState[] {

        // return value
        let reachableStates: WorldState[] = [];

        // move left
        if (state.arm > 0) {

            // clone current state
            let leftState = cloneObject(state);

            leftState.arm = state.arm - 1;

            // save reachable state
            reachableStates.push(leftState);
        }

        // move right
        if (state.arm < state.stacks.length - 1) {

            // clone current state
            let rightState = cloneObject(state);

            rightState.arm = state.arm + 1;

            // save reachable state
            reachableStates.push(rightState);
        }

        // pick up / drop object
        let heldObjectTag : string = state.holding;
        let stateArmPos : number = state.arm;
        let stateStackBelowArm : Stack = state.stacks[stateArmPos];
        let numElsInStack : number = stateStackBelowArm.length;
        if (heldObjectTag == null) { // pick up
            if (numElsInStack > 0) {

                // clone current state
                let pickUpState = cloneObject(state);

                // pick up object
                let pickedObject = pickUpState.stacks[stateArmPos].pop();
                pickUpState.holding = pickedObject;

                // save reachable state
                reachableStates.push(pickUpState);
            }
        } else { // drop
            
            // potential object to drop onto
            let stackTopObjectTag : string;
            if (numElsInStack == 0) {
                stackTopObjectTag = "floor";
            } else {
                stackTopObjectTag = stateStackBelowArm[numElsInStack - 1];
            }
            
            let canDrop : boolean = Interpreter.checkRelation("ontop",[heldObjectTag,stackTopObjectTag],state);
            if (canDrop) {

                // clone current state
                let dropState = cloneObject(state);

                // drop object
                dropState.stacks[stateArmPos].push(heldObjectTag);
                dropState.holding = null;

                // save reachable state
                reachableStates.push(dropState);
            }
        }

        return reachableStates;
    }

    /**
     * used for cloning objects
     */
    function cloneObject(obj) {
        if (obj === null || typeof obj !== 'object') {
            return obj;
        }
        var temp = obj.constructor();
        for (var key in obj) {
            temp[key] = cloneObject(obj[key]);
        }
        return temp;
    }

}